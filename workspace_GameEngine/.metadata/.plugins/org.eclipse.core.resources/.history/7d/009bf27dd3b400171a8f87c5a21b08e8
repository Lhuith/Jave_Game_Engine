package com.base.engine.components;

import com.base.engine.core.Input;
import com.base.engine.core.Matrix4f;
import com.base.engine.core.Quaternion;
import com.base.engine.core.Time;
import com.base.engine.core.Vector2f;
import com.base.engine.core.Vector3f;
import com.base.engine.rendering.RenderingEngine;
import com.base.engine.rendering.Window;

public class Camera extends GameComponent
{
	public static final Vector3f yAxis = new Vector3f(0, 1, 0);
	
	private Matrix4f projection;
		
	public Camera(float fov, float aspect, float zNear, float zFar)
	{
		this.projection = new Matrix4f().initPerspective(fov, aspect, zNear, zFar);
	}
	
	public Matrix4f getViewProjection()
	{
		Matrix4f cameraRotation = getTransform().getRot().toRotationMatrix(); 
		Matrix4f cameraTranslation = new Matrix4f().initTranslation(-getTransform().getPos().getX(), -getTransform().getPos().getY(), -getTransform().getPos().getZ());

		return projection.mul(cameraRotation.mul(cameraTranslation));
	}
	
	@Override
	public void addToRenderingEngine(RenderingEngine renderingEngine)
	{
		renderingEngine.addCamera(this);
	}
	
	
	boolean mouseLocked = false;
	Vector2f centrePosition = new Vector2f(Window.getWidth()/2, Window.getHeight()/2);
	
	public void input (float delta)
	{
		float sensitivity = 0.25f;
		float moveAmt = (float)(10 * delta);
		//float rotAmt = (float)(100* Time.getDelta());
		
		if(Input.GetKey(Input.KEY_ESCAPE))
		{
			Input.SetCursor(true);
			mouseLocked = false;
		}
		if(Input.GetMouseDown(1))
		{
			Input.SetMousePosition(centrePosition);
			Input.SetCursor(false);
			mouseLocked = true;
		}
		
		if(Input.GetMouseUp(1))
		{
			Input.SetMousePosition(centrePosition);
			Input.SetCursor(true);
			mouseLocked = false;
		}
		
		
		if(Input.GetKey(Input.KEY_W))
			move(getTransform().getRot().getForward(), moveAmt);
		if(Input.GetKey(Input.KEY_S))
			move(getTransform().getRot().getForward(), -moveAmt);
		if(Input.GetKey(Input.KEY_A))
			move(getTransform().getRot().getLeft(), moveAmt);
		if(Input.GetKey(Input.KEY_D))
			move(getTransform().getRot().getRight(), moveAmt);
			
		
		if(mouseLocked)
		{
			Vector2f deltaPos = Input.GetMousePosition().sub(centrePosition);
			
			boolean rotY = deltaPos.getX() != 0;
			boolean rotX = deltaPos.getY() != 0;
			
			if(rotY)
				getTransform().setRot(getTransform().getRot().mul(new Quaternion().initRotation(yAxis,(float)Math.toRadians(-deltaPos.getX() * sensitivity))));
			if(rotX)
				getTransform().setRot(getTransform().getRot().mul(new Quaternion().initRotation(getTransform().getRot().getRight(),(float)Math.toRadians(deltaPos.getY() * sensitivity))));
			
			
			if(rotY || rotX)
				Input.SetMousePosition(new Vector2f(Window.getWidth()/2, Window.getHeight()/2));
		}
//		if(Input.GetKey(Input.KEY_UP))
//			rotateX(-rotAmt);		
//		if(Input.GetKey(Input.KEY_DOWN))
//			rotateX(rotAmt);
//		
//		if(Input.GetKey(Input.KEY_LEFT))
//			rotateY(-rotAmt);
//		if(Input.GetKey(Input.KEY_RIGHT))
//			rotateY(rotAmt);
			
	}
	public void move(Vector3f dir, float amt)
	{
		getTransform().setPos(getTransform().getPos().add(dir.mul(amt)));
	}

//	public void rotateY(float angle)
//	{
//		Vector3f Haxis = yAxis.cross(forward).normalized();
//		
//		forward = forward.rotate(yAxis, angle).normalized();
//		
//		up = forward.cross(Haxis).normalized();
//	}
//	
//	public void rotateX(float angle)
//	{
//		Vector3f Haxis = yAxis.cross(forward).normalized();
//		
//		forward = forward.rotate(Haxis, angle).normalized();
//
//		up = forward.cross(Haxis).normalized();
//	}
//	
//	
//	public Vector3f getLeft()
//	{
//		return forward.cross(up).normalized();
//	}
//	
//	public Vector3f getRight()
//	{
//		return up.cross(forward).normalized();
//	}
//	
//	public Vector3f getPos() {
//		return pos;
//	}
//
//	public void setPos(Vector3f pos) {
//		this.pos = pos;
//	}
//
//	public Vector3f getForward() {
//		return forward;
//	}
//
//	public void setForward(Vector3f forward) {
//		this.forward = forward;
//	}
//
//	public Vector3f getUp() {
//		return up;
//	}
//
//	public void setUp(Vector3f up) {
//		this.up = up;
//	}
}
