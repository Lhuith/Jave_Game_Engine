package com.base.engine.core;

import static org.lwjgl.opengl.GL11.*;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.nio.ByteBuffer;

import javax.imageio.ImageIO;

import org.newdawn.slick.opengl.TextureLoader;

public class Texture 
{
	private int id;
	
	public Texture(String fileName)
	{
		this(LoadTexture(fileName));
	}
	
	public Texture(int id)
	{
		this.id = id;
	}
	
	public void bind()
	{
		glBindTexture(GL_TEXTURE_2D, id);
	}
	
	public int GetID()
	{
		return id;
	}
	
	private static int LoadTexture(String fileName)
	{
		String[] splitArray = fileName.split("\\.");
		String ext = splitArray[splitArray.length - 1];
		
		try
		{
			BufferedImage image = ImageIO.read(new File("./res/textures/" + fileName));
			int[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth());
			
			ByteBuffer buffer = Util.createByteBuffer(image.getHeight() * image.getWidth() * 4);
			boolean hasAlpha = image.getColorModel().hasAlpha();
			
			for(int y = 0; y < image.getHeight(); y++)
			{
				for(int x = 0; x < image.getWidth(); x++)
				{
					int pixel = pixels[y * image.getWidth() + x];
					
					buffer.put((byte)((pixel >> 16)& 0xFF)); //red part of pixel
					buffer.put((byte)((pixel >> 8)& 0xFF)); //blue part of pixel
					buffer.put((byte)((pixel)& 0xFF)); //green part of pixel
					if(hasAlpha)
						buffer.put((byte)((pixel >> 24)& 0xFF)); //alpha part of pixel
					else
						buffer.put((byte)(0xFF)); //alpha part of pixel
				}
			}
			
			int id = glGenTextures();		
			glBindTexture(GL_TEXTURE_2D, id);
			
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
			
			return id;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.exit(1);
		}
		
		return 0;
	}
	
}
