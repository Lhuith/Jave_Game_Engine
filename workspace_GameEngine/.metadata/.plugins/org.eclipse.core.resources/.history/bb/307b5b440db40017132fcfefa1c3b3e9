package com.base.game;

import com.base.engine.core.Game;
import com.base.engine.core.Texture;
import com.base.engine.core.Time;
import com.base.engine.core.Transform;
import com.base.engine.core.Vector2f;
import com.base.engine.core.Vector3f;
import com.base.engine.rendering.Attenuation;
import com.base.engine.rendering.BaseLight;
import com.base.engine.rendering.Camera;
import com.base.engine.rendering.Material;
import com.base.engine.rendering.Mesh;
import com.base.engine.rendering.PhongShader;
import com.base.engine.rendering.PointLight;
import com.base.engine.rendering.RenderUtil;
import com.base.engine.rendering.Shader;
import com.base.engine.rendering.SpotLight;
import com.base.engine.rendering.Vertex;
import com.base.engine.rendering.Window;

public class TestGame implements Game 
{
	private Camera camera;
	
	public void init()
	{
		camera = new Camera();
		material = new Material(new Texture("test.png"), new Vector3f(1.0f, 1.0f, 1.0f), 1, 8);
		shader = BasicShader.getInstance();
		transform = new Transform();
		
		
		float fieldDepth = 10.0f;
		float fieldWidth = 10.0f;
		
		
		Vertex[] vertices = new Vertex[]
				{
						new Vertex(new Vector3f(-fieldWidth, 0.0f, -fieldDepth),  new Vector2f(0.0f, 0.0f)),
						new Vertex(new Vector3f(-fieldWidth, 0.0f, fieldDepth * 3), new Vector2f(0.0f, 1.0f)),
						new Vertex(new Vector3f(fieldWidth * 3, 0.0f, -fieldDepth),   new Vector2f(1.0f, 0.0f)),
						new Vertex(new Vector3f(fieldWidth * 3, 0.0f, fieldDepth* 3),       new Vector2f(1.0f, 1.0f)),
				};
		int[] indices = new int[] {0, 1, 2,
								   2, 1, 3
		};
		
		mesh = new Mesh(vertices, indices, true);
		
		Transform.setProjection(70f, Window.getWidth(), Window.GetHeight(), 0.1f, 1000);
		Transform.setCamera(camera);
		
	}
	
	public void input()
	{
		camera.input();
	}
	
	float temp = 0.0f;
	
	public void update()
	{
		temp += Time.getDelta();
		
		float sinTemp = (float)Math.sin(temp);
		
		transform.setTranslation(0, -1, 5);
		//transform.setRotation(0, sinTemp * 180, 0);
		sLight1.getPointLight().setPosition(camera.getPos());
		sLight1.setDirection(camera.getForward());
		pLight1.setPosition(new Vector3f(3, 0, 8.0f * (float)Math.sin(temp) + 1.0f/2.0f + 10));
		pLight2.setPosition(new Vector3f(7, 0, 8.0f * (float)Math.cos(temp) + 1.0f/2.0f + 10));
	}
	
	
	public void render()
	{
		RenderUtil.setClearColor(Transform.getCamera().getPos().div(2048f).abs());
		shader.bind();
		shader.updateUniforms(transform.getTransformation(), transform.getProjectedTransformation(), material);
		mesh.draw();
	}
}
